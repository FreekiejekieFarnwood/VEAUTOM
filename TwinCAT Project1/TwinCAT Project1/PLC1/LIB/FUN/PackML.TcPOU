<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="PackML" Id="{ec8fd509-f43b-4b61-a330-5cf903933573}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION PackML : E_State_PackML
VAR_INPUT
	Abort 			: BOOL;
	Aborting_SC 	: BOOL;
	Clear 			: BOOL;
	Clearing_SC 	: BOOL;
	Execute_SC 		: BOOL;
	Completing_SC	: BOOL;
	Hold 			: BOOL;
	Holding_SC 		: BOOL;
	Reset 			: BOOL;
	Resetting_SC 	: BOOL;
	Start 			: BOOL;
	Starting_SC 	: BOOL;
	Stop 			: BOOL;
	Stopping_SC 	: BOOL;
	Suspend 		: BOOL;
	Suspending_SC 	: BOOL;
	Unhold 			: BOOL;
	Unholding_SC 	: BOOL;
	Unsuspend 		: BOOL;
	Unsuspending_SC : BOOL;
END_VAR
VAR
	fb_mem			: STRUCT_PackML;
	bFirstCycleBit	: BOOL := FALSE;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[(*
$$$$$$$$\                                                                   $$\       $$$$$$$$\                     $$\                                         $$\                     
$$  _____|                                                                  $$ |      $$  _____|                    \__|                                        \__|                    
$$ |   $$$$$$\   $$$$$$\  $$$$$$$\  $$\  $$\  $$\  $$$$$$\   $$$$$$\   $$$$$$$ |      $$ |      $$$$$$$\   $$$$$$\  $$\ $$$$$$$\   $$$$$$\   $$$$$$\   $$$$$$\  $$\ $$$$$$$\   $$$$$$\  
$$$$$\ \____$$\ $$  __$$\ $$  __$$\ $$ | $$ | $$ |$$  __$$\ $$  __$$\ $$  __$$ |      $$$$$\    $$  __$$\ $$  __$$\ $$ |$$  __$$\ $$  __$$\ $$  __$$\ $$  __$$\ $$ |$$  __$$\ $$  __$$\ 
$$  __|$$$$$$$ |$$ |  \__|$$ |  $$ |$$ | $$ | $$ |$$ /  $$ |$$ /  $$ |$$ /  $$ |      $$  __|   $$ |  $$ |$$ /  $$ |$$ |$$ |  $$ |$$$$$$$$ |$$$$$$$$ |$$ |  \__|$$ |$$ |  $$ |$$ /  $$ |
$$ |  $$  __$$ |$$ |      $$ |  $$ |$$ | $$ | $$ |$$ |  $$ |$$ |  $$ |$$ |  $$ |      $$ |      $$ |  $$ |$$ |  $$ |$$ |$$ |  $$ |$$   ____|$$   ____|$$ |      $$ |$$ |  $$ |$$ |  $$ |
$$ |  \$$$$$$$ |$$ |      $$ |  $$ |\$$$$$\$$$$  |\$$$$$$  |\$$$$$$  |\$$$$$$$ |      $$$$$$$$\ $$ |  $$ |\$$$$$$$ |$$ |$$ |  $$ |\$$$$$$$\ \$$$$$$$\ $$ |      $$ |$$ |  $$ |\$$$$$$$ |
\__|   \_______|\__|      \__|  \__| \_____\____/  \______/  \______/  \_______|      \________|\__|  \__| \____$$ |\__|\__|  \__| \_______| \_______|\__|      \__|\__|  \__| \____$$ |
                                                                                                          $$\   $$ |                                                          $$\   $$ |
                                                                                                          \$$$$$$  |                                                          \$$$$$$  |
                                                                                                           \______/                                                            \______/ 
*)
//INPUT NAAR STRUCT
fb_mem.Abort 			:= Abort;
fb_mem.Aborting_SC 		:= Aborting_SC;
fb_mem.Clear 			:= Clear;
fb_mem.Clearing_SC 		:= Clearing_SC;
fb_mem.Execute_SC 		:= Execute_SC;
fb_mem.Completing_SC	:= Completing_SC;
fb_mem.Hold 			:= Hold;
fb_mem.Holding_SC 		:= Holding_SC;
fb_mem.Reset 			:= Reset;
fb_mem.Resetting_SC 	:= Resetting_SC;
fb_mem.Start 			:= Start;
fb_mem.Starting_SC 		:= Starting_SC;
fb_mem.Stop 			:= Stop;
fb_mem.Stopping_SC 		:= Stopping_SC;
fb_mem.Suspend 			:= Suspend;
fb_mem.Suspending_SC 	:= Suspending_SC;
fb_mem.Unhold 			:= Unhold;
fb_mem.Unholding_SC 	:= Unholding_SC;
fb_mem.Unsuspend 		:= Unsuspend;
fb_mem.Unsuspending_SC	:= Unsuspending_SC;

// FIRST CYCLE
IF bFIrstCycleBit THEN
	fb_mem.State := E_State_PackML.RESETTING;
	bFirstCycleBit := TRUE;
END_IF

//TRANSITIES
CASE fb_mem.State OF
	E_State_PackML.IDLE 			: 
		//HAPPY FLOW		
		IF fb_mem.Start AND NOT fb_mem.Abort THEN
			fb_mem.State:= E_State_PackML.STARTING;
		END_IF
		
		//EXEPTION HANDLING
		IF fb_mem.Abort THEN
			fb_mem.State:= E_State_PackML.ABORTING;
		END_IF
		IF fb_mem.Stop THEN
			fb_mem.State:= E_State_PackML.STOPPING;
		END_IF
	
	E_State_PackML.STARTING 		:
		//HAPPY FLOW		
		IF fb_mem.Starting_SC AND NOT fb_mem.Abort THEN
			fb_mem.State:= E_State_PackML.EXECUTE;
		END_IF
		
		//EXEPTION HANDLING
		IF fb_mem.Abort THEN
			fb_mem.State:= E_State_PackML.ABORTING;
		END_IF
		IF fb_mem.Stop THEN
			fb_mem.State:= E_State_PackML.STOPPING;
		END_IF
	
	E_State_PackML.EXECUTE 			: 
		//HAPPY FLOW		
		IF fb_mem.Execute_SC AND NOT fb_mem.Abort THEN
			fb_mem.State:= E_State_PackML.IDLE;
		END_IF
		
		IF fb_mem.Hold THEN
			fb_mem.State:= E_State_PackML.HOLDING;
		END_IF
		
		IF fb_mem.Suspend THEN
			fb_mem.State:= E_State_PackML.SUSPENDED;
		END_IF
		
		//EXEPTION HANDLING
		IF fb_mem.Abort THEN
			fb_mem.State:= E_State_PackML.ABORTING;
		END_IF
		IF fb_mem.Stop THEN
			fb_mem.State:= E_State_PackML.STOPPING;
		END_IF
	
	E_State_PackML.COMPLETE 		:
		//HAPPY FLOW
		fb_mem.State:= E_State_PackML.RESETTING;
	
	E_State_PackML.RESETTING 		:
		//HAPPY FLOW		
		IF fb_mem.Resetting_SC AND NOT fb_mem.Abort THEN
			fb_mem.State:= E_State_PackML.IDLE;
		END_IF
		
		//EXEPTION HANDLING
		IF fb_mem.Abort THEN
			fb_mem.State:= E_State_PackML.ABORTING;
		END_IF
		IF fb_mem.Stop THEN
			fb_mem.State:= E_State_PackML.STOPPING;
		END_IF
	
	E_State_PackML.HOLDING 			:
		//HAPPY FLOW		
		IF fb_mem.Holding_SC AND NOT fb_mem.Abort THEN
			fb_mem.State:= E_State_PackML.HELD;
		END_IF
		
		//EXEPTION HANDLING
		IF fb_mem.Abort THEN
			fb_mem.State:= E_State_PackML.ABORTING;
		END_IF
		IF fb_mem.Stop THEN
			fb_mem.State:= E_State_PackML.STOPPING;
		END_IF
		
	
	E_State_PackML.HELD 			:
		//HAPPY FLOW		
		IF fb_mem.Unhold AND NOT fb_mem.Abort THEN
			fb_mem.State:= E_State_PackML.UNHOLDING;
		END_IF
		
		//EXEPTION HANDLING
		IF fb_mem.Abort THEN
			fb_mem.State:= E_State_PackML.ABORTING;
		END_IF
		IF fb_mem.Stop THEN
			fb_mem.State:= E_State_PackML.STOPPING;
		END_IF
	
	E_State_PackML.UNHOLDING 		:
		//HAPPY FLOW		
		IF fb_mem.Unholding_SC AND NOT fb_mem.Abort THEN
			fb_mem.State:= E_State_PackML.EXECUTE;
		END_IF
		
		//EXEPTION HANDLING
		IF fb_mem.Abort THEN
			fb_mem.State:= E_State_PackML.ABORTING;
		END_IF
		IF fb_mem.Stop THEN
			fb_mem.State:= E_State_PackML.STOPPING;
		END_IF
	
	E_State_PackML.SUSPENDING 		:
		//HAPPY FLOW		
		IF fb_mem.Suspending_SC AND NOT fb_mem.Abort THEN
			fb_mem.State:= E_State_PackML.SUSPENDED;
		END_IF
		
		//EXEPTION HANDLING
		IF fb_mem.Abort THEN
			fb_mem.State:= E_State_PackML.ABORTING;
		END_IF
		IF fb_mem.Stop THEN
			fb_mem.State:= E_State_PackML.STOPPING;
		END_IF
	
	
	E_State_PackML.SUSPENDED 		:
		//HAPPY FLOW		
		IF fb_mem.Unsuspend AND NOT fb_mem.Abort THEN
			fb_mem.State:= E_State_PackML.UNSUSPENDING;
		END_IF
		
		//EXEPTION HANDLING
		IF fb_mem.Abort THEN
			fb_mem.State:= E_State_PackML.ABORTING;
		END_IF
		IF fb_mem.Stop THEN
			fb_mem.State:= E_State_PackML.STOPPING;
		END_IF
	
	E_State_PackML.UNSUSPENDING 	:
		//HAPPY FLOW		
		IF fb_mem.Unsuspending_SC AND NOT fb_mem.Abort THEN
			fb_mem.State:= E_State_PackML.EXECUTE;
		END_IF
		
		//EXEPTION HANDLING
		IF fb_mem.Abort THEN
			fb_mem.State:= E_State_PackML.ABORTING;
		END_IF
		IF fb_mem.Stop THEN
			fb_mem.State:= E_State_PackML.STOPPING;
		END_IF
	
	E_State_PackML.ABORTED			:
		//HAPPY FLOW		
		IF fb_mem.Clear THEN
			fb_mem.State:= E_State_PackML.CLEARING;
		END_IF
	
		
	E_State_PackML.ABORTING			:
		//HAPPY FLOW		
		IF fb_mem.Aborting_SC THEN
			fb_mem.State:= E_State_PackML.ABORTED;
		END_IF
	
		
	E_State_PackML.CLEARING 		:
		//HAPPY FLOW		
		IF fb_mem.Clearing_SC THEN
			fb_mem.State:= E_State_PackML.STOPPED;
		END_IF
		
		//EXEPTION HANDLING
		IF fb_mem.Abort THEN
			fb_mem.State:= E_State_PackML.ABORTING;
		END_IF
		
		
	E_State_PackML.STOPPING 		:
		//HAPPY FLOW
		IF fb_mem.Stopping_SC THEN
			fb_mem.State:= E_State_PackML.STOPPED;
		END_IF
		
		//EXEPTION HANDLING
		IF fb_mem.Abort THEN
			fb_mem.State:= E_State_PackML.ABORTING;
		END_IF
		
	
	E_State_PackML.STOPPED 			: 
		//HAPPY FLOW
		IF fb_mem.Reset AND NOT fb_mem.Abort THEN
			fb_mem.State:= E_State_PackML.RESETTING;
		END_IF
		
		//EXEPTION HANDLING
		IF fb_mem.Abort THEN
			fb_mem.State:= E_State_PackML.ABORTING;
		END_IF
		IF fb_mem.Stop THEN
			fb_mem.State:= E_State_PackML.STOPPING;
		END_IF
END_CASE
PackML := fb_mem.State;

]]></ST>
    </Implementation>
    <LineIds Name="PackML">
      <LineId Id="8" Count="12" />
      <LineId Id="250" Count="0" />
      <LineId Id="254" Count="18" />
      <LineId Id="251" Count="0" />
      <LineId Id="279" Count="1" />
      <LineId Id="282" Count="1" />
      <LineId Id="285" Count="0" />
      <LineId Id="284" Count="0" />
      <LineId Id="281" Count="0" />
      <LineId Id="21" Count="207" />
      <LineId Id="321" Count="0" />
      <LineId Id="287" Count="0" />
      <LineId Id="286" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>