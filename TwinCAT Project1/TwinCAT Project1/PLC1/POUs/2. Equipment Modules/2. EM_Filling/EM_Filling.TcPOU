<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="EM_Filling" Id="{63eb49f5-59e7-4030-85dd-f42cd0c3af32}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK EM_Filling IMPLEMENTS ITF_PackML
VAR
	fb_mem : STRUCT_EM_Filling;
	bFirstCycleExecuted : BOOL;
	
	//Submodules
	EM_FillerA1				: EM_Machine;
	EM_FillerA2				: EM_Machine;
	EM_TransportFillers		: EM_Transport;
	EM_OutfeedFillers		: EM_Transport_Mechanische_Stop;
	
	
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[(*
$$$$$$$$\                                                                   $$\       $$$$$$$$\                     $$\                                         $$\                     
$$  _____|                                                                  $$ |      $$  _____|                    \__|                                        \__|                    
$$ |   $$$$$$\   $$$$$$\  $$$$$$$\  $$\  $$\  $$\  $$$$$$\   $$$$$$\   $$$$$$$ |      $$ |      $$$$$$$\   $$$$$$\  $$\ $$$$$$$\   $$$$$$\   $$$$$$\   $$$$$$\  $$\ $$$$$$$\   $$$$$$\  
$$$$$\ \____$$\ $$  __$$\ $$  __$$\ $$ | $$ | $$ |$$  __$$\ $$  __$$\ $$  __$$ |      $$$$$\    $$  __$$\ $$  __$$\ $$ |$$  __$$\ $$  __$$\ $$  __$$\ $$  __$$\ $$ |$$  __$$\ $$  __$$\ 
$$  __|$$$$$$$ |$$ |  \__|$$ |  $$ |$$ | $$ | $$ |$$ /  $$ |$$ /  $$ |$$ /  $$ |      $$  __|   $$ |  $$ |$$ /  $$ |$$ |$$ |  $$ |$$$$$$$$ |$$$$$$$$ |$$ |  \__|$$ |$$ |  $$ |$$ /  $$ |
$$ |  $$  __$$ |$$ |      $$ |  $$ |$$ | $$ | $$ |$$ |  $$ |$$ |  $$ |$$ |  $$ |      $$ |      $$ |  $$ |$$ |  $$ |$$ |$$ |  $$ |$$   ____|$$   ____|$$ |      $$ |$$ |  $$ |$$ |  $$ |
$$ |  \$$$$$$$ |$$ |      $$ |  $$ |\$$$$$\$$$$  |\$$$$$$  |\$$$$$$  |\$$$$$$$ |      $$$$$$$$\ $$ |  $$ |\$$$$$$$ |$$ |$$ |  $$ |\$$$$$$$\ \$$$$$$$\ $$ |      $$ |$$ |  $$ |\$$$$$$$ |
\__|   \_______|\__|      \__|  \__| \_____\____/  \______/  \______/  \_______|      \________|\__|  \__| \____$$ |\__|\__|  \__| \_______| \_______|\__|      \__|\__|  \__| \____$$ |
                                                                                                          $$\   $$ |                                                          $$\   $$ |
                                                                                                          \$$$$$$  |                                                          \$$$$$$  |
                                                                                                           \______/                                                            \______/ 
*)//********************************Initiating***********************************
fb_mem.STS.State := PackML_StateMachine(State			:= fb_mem.STS.State,
										Start           := fb_mem.CS.Start,
										Stop            := fb_mem.CS.Stop,
										Reset           := fb_mem.CS.Reset,
										Abort           := fb_mem.CS.Abort,
										Clear           := fb_mem.CS.Clear,
										UnSuspend       := fb_mem.CS.UnSuspend,
										Suspend         := fb_mem.CS.Suspend,
										UnHold          := fb_mem.CS.UnHold,
										Hold            := fb_mem.CS.Hold,
										Starting_SC     := fb_mem.STS.Starting_SC,
										Execute_SC      := fb_mem.STS.Execute_SC,
										Resetting_SC    := fb_mem.STS.Resetting_SC,
										Holding_SC      := fb_mem.STS.Holding_SC,
										Unholding_SC    := fb_mem.STS.Unholding_SC,
										Suspending_SC   := fb_mem.STS.Suspending_SC,
										Unsuspending_SC := fb_mem.STS.Unsuspending_SC,
										Aborting_SC     := fb_mem.STS.Aborting_SC,
										Clearing_SC     := fb_mem.STS.Clearing_SC,
										Completing_SC	:= fb_mem.STS.Completing_SC,
										Stopping_SC     := fb_mem.STS.Stopping_SC);

//********************************Init***********************************
EM_FillerA1();
EM_FillerA2();	
EM_TransportFillers();
EM_OutfeedFillers();

IF fb_mem.STS.Starting_SC THEN
	EM_FillerA1.Starting_SC();
	EM_FillerA2.Starting_SC();
	EM_TransportFillers.Starting_SC();
	EM_OutfeedFillers.Starting_SC();
END_IF
IF fb_mem.STS.Execute_SC THEN
	EM_FillerA1.Execute_SC();
	EM_FillerA2.Execute_SC();
	EM_TransportFillers.Execute_SC();
	EM_OutfeedFillers.Execute_SC();
END_IF
IF fb_mem.STS.Resetting_SC THEN
	EM_FillerA1.Resetting_SC();
	EM_FillerA2.Resetting_SC();
	EM_TransportFillers.Resetting_SC();
	EM_OutfeedFillers.Resetting_SC();
END_IF
IF fb_mem.STS.Holding_SC THEN
	EM_FillerA1.Holding_SC();
	EM_FillerA2.Holding_SC();
	EM_TransportFillers.Holding_SC();
	EM_OutfeedFillers.Holding_SC();
END_IF
IF fb_mem.STS.Unholding_SC THEN
	EM_FillerA1.Unholding_SC();
	EM_FillerA2.Unholding_SC();
	EM_TransportFillers.Unholding_SC();
	EM_OutfeedFillers.Unholding_SC();
END_IF
IF fb_mem.STS.Suspending_SC THEN
	EM_FillerA1.Suspending_SC();
	EM_FillerA2.Suspending_SC();
	EM_TransportFillers.Suspending_SC();
	EM_OutfeedFillers.Suspending_SC();
END_IF
IF fb_mem.STS.Unsuspending_SC THEN
	EM_FillerA1.Unsuspending_SC();
	EM_FillerA2.Unsuspending_SC();
	EM_TransportFillers.Unsuspending_SC();
	EM_OutfeedFillers.Unsuspending_SC();
END_IF
IF fb_mem.STS.Aborting_SC THEN
	EM_FillerA1.Aborting_SC();
	EM_FillerA2.Aborting_SC();
	EM_TransportFillers.Aborting_SC();
	EM_OutfeedFillers.Aborting_SC();
END_IF
IF fb_mem.STS.Clearing_SC THEN
	EM_FillerA1.Clearing_SC();
	EM_FillerA2.Clearing_SC();
	EM_TransportFillers.Clearing_SC();
	EM_OutfeedFillers.Clearing_SC();
END_IF
IF fb_mem.STS.Stopping_SC THEN
	EM_FillerA1.Stopping_SC();
	EM_FillerA2.Stopping_SC();
	EM_TransportFillers.Stopping_SC();
	EM_OutfeedFillers.Stopping_SC();
END_IF
IF fb_mem.STS.Completing_SC THEN
	EM_FillerA1.Completing_SC();
	EM_FillerA2.Completing_SC();
	EM_TransportFillers.Completing_SC();
	EM_OutfeedFillers.Completing_SC();
END_IF
								
//********************************ZEROING***********************************
fb_mem.STS.Starting_SC 		:= FALSE;
fb_mem.STS.Execute_SC 		:= FALSE;
fb_mem.STS.Resetting_SC 	:= FALSE;
fb_mem.STS.Holding_SC 		:= FALSE;
fb_mem.STS.Unholding_SC 	:= FALSE;
fb_mem.STS.Suspending_SC 	:= FALSE;
fb_mem.STS.Unsuspending_SC 	:= FALSE;
fb_mem.STS.Aborting_SC 		:= FALSE;
fb_mem.STS.Clearing_SC 		:= FALSE;
fb_mem.STS.Stopping_SC 		:= FALSE;
fb_mem.STS.Completing_SC 	:= FALSE;

//********************************Auto manual logic***********************************
IF NOT bFirstCycleExecuted THEN
	EM_FillerA1.Auto();
	EM_FillerA2.Auto();
	EM_TransportFillers.Auto();
	EM_OutfeedFillers.Auto();
	bFirstCycleExecuted := TRUE;
END_IF

IF fb_mem.CS.Auto OR fb_mem.HMI.Auto THEN
	fb_mem.STS.Auto := TRUE;
	fb_mem.STS.Manueel := FALSE;
END_IF

IF fb_mem.CS.Manueel OR fb_mem.HMI.Manueel THEN
	fb_mem.STS.Auto := FALSE;
	fb_mem.STS.Manueel := TRUE;
END_IF


IF fb_mem.CS.Reset THEN
	EM_FillerA1.Reset();
	EM_FillerA2.Reset();
	EM_TransportFillers.Reset();
	EM_OutfeedFillers.Reset();
END_IF

IF fb_mem.CS.Abort THEN
	EM_FillerA1.Abort();
	EM_FillerA2.Abort();
	EM_TransportFillers.Abort();
	EM_OutfeedFillers.Abort();
END_IF

IF fb_mem.CS.Clear THEN
	EM_FillerA1.Clear();
	EM_FillerA2.Clear();
	EM_TransportFillers.Clear();
	EM_OutfeedFillers.Clear();
END_IF

IF fb_mem.CS.UnSuspend THEN
	EM_FillerA1.UnSuspend();
	EM_FillerA2.UnSuspend();
	EM_TransportFillers.UnSuspend();
	EM_OutfeedFillers.UnSuspend();
END_IF

IF fb_mem.CS.Suspend THEN
	EM_FillerA1.Suspend();
	EM_FillerA2.Suspend();
	EM_TransportFillers.Suspend();
	EM_OutfeedFillers.Suspend();
END_IF

IF fb_mem.CS.UnHold THEN
	EM_FillerA1.UnHold();
	EM_FillerA2.UnHold();
	EM_TransportFillers.UnHold();
	EM_OutfeedFillers.UnHold();
END_IF

IF fb_mem.CS.Hold THEN
	EM_FillerA1.Hold();
	EM_FillerA2.Hold();
	EM_TransportFillers.Hold();
	EM_OutfeedFillers.Hold();
END_IF

//********************************Exeptionhandling***********************************

//********************************Action case***********************************
CASE fb_mem.STS.State OF
	E_State_PackML.IDLE 			: 
		//Do nothing
	E_State_PackML.STARTING 		:
		EM_FillerA1.Start();
		IF EM_FillerA1.State 			= E_State_PackML.EXECUTE THEN
			EM_FillerA2.Start();
			IF EM_FillerA2.State 			= E_State_PackML.EXECUTE THEN
				EM_TransportFillers.Start();
				IF EM_TransportFillers.State	= E_State_PackML.EXECUTE THEN
					EM_OutfeedFillers.Start();
					IF EM_OutfeedFillers.State		= E_State_PackML.EXECUTE THEN
						fb_mem.STS.Starting_SC 		:= TRUE;
					END_IF
				END_IF
			END_IF
		END_IF
	E_State_PackML.EXECUTE 			: 
		// MAIN LOGIC:

		
	E_State_PackML.COMPLETE 		:
		IF fb_mem.CS.Clear AND fb_mem.STS.Auto OR fb_mem.HMI.Clear AND fb_mem.STS.Manueel THEN
			fb_mem.STS.Completing_SC := TRUE;
		END_IF
	E_State_PackML.RESETTING 		:
		EM_FillerA1.Reset();
		EM_FillerA2.Reset();
		EM_TransportFillers.Reset();
		EM_OutfeedFillers.Reset();
		IF 	EM_FillerA1.State 			= E_State_PackML.IDLE AND 
			EM_FillerA2.State 			= E_State_PackML.IDLE AND 
			EM_TransportFillers.State	= E_State_PackML.IDLE AND 
			EM_OutfeedFillers.State		= E_State_PackML.IDLE THEN
				fb_mem.STS.Resetting_SC 		:= TRUE;	
		END_IF
	E_State_PackML.HOLDING 			:
		EM_FillerA1.Hold();
		EM_FillerA2.Hold();
		EM_TransportFillers.Hold();
		EM_OutfeedFillers.Hold();
		IF 	EM_FillerA1.State 			= E_State_PackML.HELD AND
			EM_FillerA2.State 			= E_State_PackML.HELD AND
			EM_TransportFillers.State 	= E_State_PackML.HELD AND
			EM_OutfeedFillers.State 	= E_State_PackML.HELD THEN
				fb_mem.STS.HOLDING_SC	:= TRUE;
		END_IF
	E_State_PackML.HELD 			:
		//Do nothing
	E_State_PackML.UNHOLDING 		:
		EM_FillerA1.Unhold();
		EM_FillerA2.Unhold();
		EM_TransportFillers.Unhold();
		EM_OutfeedFillers.Unhold();
		IF 	EM_FillerA1.State 			= E_State_PackML.EXECUTE AND
			EM_FillerA2.State 			= E_State_PackML.EXECUTE AND
			EM_TransportFillers.State 	= E_State_PackML.EXECUTE AND
			EM_OutfeedFillers.State 	= E_State_PackML.EXECUTE THEN
				fb_mem.STS.UNHOLDING_SC	:= TRUE;
		END_IF;
	E_State_PackML.SUSPENDING 		:
		EM_FillerA1.Suspend();
		EM_FillerA2.Suspend();
		EM_TransportFillers.Suspend();
		EM_OutfeedFillers.Suspend();
		IF 	EM_FillerA1.State 			= E_State_PackML.SUSPENDED AND
			EM_FillerA2.State 			= E_State_PackML.SUSPENDED AND
			EM_TransportFillers.State 	= E_State_PackML.SUSPENDED AND
			EM_OutfeedFillers.State 	= E_State_PackML.SUSPENDED THEN
				fb_mem.STS.Suspending_SC	:= TRUE;
		END_IF
	E_State_PackML.SUSPENDED 		:			// TO BE PROGRAMMED
		//Do nothing
	E_State_PackML.UNSUSPENDING 	:
		EM_FillerA1.Unsuspend();
		EM_FillerA2.Unsuspend();
		EM_TransportFillers.Unsuspend();
		EM_OutfeedFillers.Unsuspend();
		IF 	EM_FillerA1.State 			= E_State_PackML.EXECUTE AND
			EM_FillerA2.State 			= E_State_PackML.EXECUTE AND
			EM_TransportFillers.State 	= E_State_PackML.EXECUTE AND
			EM_OutfeedFillers.State 	= E_State_PackML.EXECUTE THEN
				fb_mem.STS.Unsuspending_SC	:= TRUE;
		END_IF
	E_State_PackML.ABORTING			:
		EM_FillerA1.Abort();
		EM_FillerA2.Abort();
		EM_TransportFillers.Abort();
		EM_OutfeedFillers.Abort();
		IF 	EM_FillerA1.State 			= E_State_PackML.ABORTED AND
			EM_FillerA2.State 			= E_State_PackML.ABORTED AND
			EM_TransportFillers.State 	= E_State_PackML.ABORTED AND
			EM_OutfeedFillers.State 	= E_State_PackML.ABORTED THEN
				fb_mem.STS.Aborting_SC:= TRUE;
		END_IF;
	E_State_PackML.ABORTED			:
		IF fb_mem.CS.Clear AND fb_mem.STS.Auto OR fb_mem.HMI.Clear AND fb_mem.STS.Manueel THEN
			EM_FillerA1.Clear();
			EM_FillerA2.Clear();
			EM_TransportFillers.Clear();
			EM_OutfeedFillers.Clear();
		END_IF
	E_State_PackML.CLEARING 		:
		IF 	EM_FillerA1.State 			= E_State_PackML.STOPPED AND
			EM_FillerA2.State 			= E_State_PackML.STOPPED AND
			EM_TransportFillers.State 	= E_State_PackML.STOPPED AND
			EM_OutfeedFillers.State 	= E_State_PackML.STOPPED THEN
				fb_mem.STS.Clearing_SC:= TRUE;
		END_IF;
	E_State_PackML.STOPPED			:
		IF fb_mem.CS.Reset AND fb_mem.STS.Auto OR fb_mem.HMI.Reset AND fb_mem.STS.Manueel THEN
			EM_FillerA1.Reset();
			EM_FillerA2.Reset();
			EM_TransportFillers.Reset();
			EM_OutfeedFillers.Reset();
		END_IF;
	
END_CASE

//********************************HMI_Connection***********************************
fb_mem.STS.StringState     := TO_STRING(fb_mem.STS.State); 

//********************************ZEROING***********************************

fb_mem.CS.Auto            := FALSE;
fb_mem.CS.Manueel         := FALSE;
fb_mem.CS.Start           := FALSE;
fb_mem.CS.Stop            := FALSE;
fb_mem.CS.Reset           := FALSE;
fb_mem.CS.Abort           := FALSE;
fb_mem.CS.Clear           := FALSE;
fb_mem.CS.UnSuspend       := FALSE;
fb_mem.CS.Suspend         := FALSE;
fb_mem.CS.UnHold          := FALSE;
fb_mem.CS.Hold            := FALSE;]]></ST>
    </Implementation>
    <Folder Name="Methods" Id="{0b1e0426-3e87-45b9-be2a-c3e65703943c}" />
    <Folder Name="Properties" Id="{eca8ff42-6510-4750-8c8d-f31adc143342}" />
    <Method Name="Abort" Id="{de576d48-1580-4ef1-851c-8690248a838b}" FolderPath="Methods\">
      <Declaration><![CDATA[{warning 'add method implementation '}
METHOD Abort : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[fb_mem.CS.Abort := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Aborting_SC" Id="{ec11ac36-ff47-4fa6-a336-ad04ccd23777}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD Aborting_SC : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[fb_mem.STS.Aborting_SC := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Auto" Id="{1f399241-baee-4f3d-8f4f-1686032e618d}" FolderPath="Methods\">
      <Declaration><![CDATA[{warning 'add method implementation '}
METHOD Auto : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[fb_mem.CS.Auto := TRUE;
Auto := fb_mem.STS.Auto;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Clear" Id="{4ec69a50-a207-4aa6-af82-b9c5406ad417}" FolderPath="Methods\">
      <Declaration><![CDATA[{warning 'add method implementation '}
METHOD Clear : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[fb_mem.CS.Clear := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Clearing_SC" Id="{37515559-bd82-44e8-9879-f16da79819b4}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD Clearing_SC : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[fb_mem.STS.Clearing_SC := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Completing_SC" Id="{8efdd68b-f70e-41c2-8567-61d086e86304}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD Completing_SC : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[fb_mem.STS.Completing_SC := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Execute_SC" Id="{fd6e5026-f4cb-45d3-aea2-5bea4f4eb6e2}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD Execute_SC : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[fb_mem.STS.Execute_SC := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_init" Id="{aa125f9a-4ad2-4e17-b506-f38ff2abab24}">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//**************************INITIATE**************************//
]]></ST>
      </Implementation>
    </Method>
    <Method Name="Hold" Id="{a7608fed-984b-4813-8f3d-213316dd7613}" FolderPath="Methods\">
      <Declaration><![CDATA[{warning 'add method implementation '}
METHOD Hold : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[fb_mem.CS.Hold := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Holding_SC" Id="{ce68ca51-3e40-4243-9d27-b9eee86e2334}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD Holding_SC : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[fb_mem.STS.Holding_SC := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Manueel" Id="{4c628e23-a488-4c91-bc19-d4a80cf148c7}" FolderPath="Methods\">
      <Declaration><![CDATA[{warning 'add method implementation '}
METHOD Manueel : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[fb_mem.CS.Manueel := TRUE;
Manueel := fb_mem.STS.Manueel;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Reset" Id="{ad9250a8-0ae5-4609-a70d-02ae4ea615a6}" FolderPath="Methods\">
      <Declaration><![CDATA[{warning 'add method implementation '}
METHOD Reset : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[fb_mem.CS.Reset := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Resetting_SC" Id="{0420a9e2-119a-4677-aed8-4fc4e3991921}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD Resetting_SC : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[fb_mem.STS.Resetting_SC := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Start" Id="{d070dcd6-3f46-4d8a-a212-a55bbe41f84f}" FolderPath="Methods\">
      <Declaration><![CDATA[{warning 'add method implementation '}
METHOD Start : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[fb_mem.CS.Start := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Starting_SC" Id="{62d43b1e-69d1-4b7f-bd9b-c283a4f10ebe}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD Starting_SC : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[fb_mem.STS.Starting_SC := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Property Name="State" Id="{63589fe4-dc24-46e1-b14a-162ac93043a0}" FolderPath="Properties\">
      <Declaration><![CDATA[{warning 'add property implementation'}
PROPERTY State : E_State_PackML
]]></Declaration>
      <Get Name="Get" Id="{29c19747-d72e-4046-8642-68fcf2df8f9b}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[State := fb_mem.STS.State;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="Stop" Id="{c25028d4-f6ba-4cac-9e84-0049729f5794}" FolderPath="Methods\">
      <Declaration><![CDATA[{warning 'add method implementation '}
METHOD Stop : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[fb_mem.CS.Stop := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Stopping_SC" Id="{cccbedc5-9e9d-4812-a6f1-7f59262cc5c1}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD Stopping_SC : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[fb_mem.STS.Stopping_SC := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Suspend" Id="{5e91378e-70fe-4d35-9c63-8d07df445e60}" FolderPath="Methods\">
      <Declaration><![CDATA[{warning 'add method implementation '}
METHOD Suspend : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[fb_mem.CS.Suspend := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Suspending_SC" Id="{b886767c-50e4-4fbc-8916-62ade2b1b35a}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD Suspending_SC : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[fb_mem.STS.Suspending_SC := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Unhold" Id="{78bf6dba-4e62-4393-9ab8-62e7c22f576b}" FolderPath="Methods\">
      <Declaration><![CDATA[{warning 'add method implementation '}
METHOD Unhold : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[fb_mem.CS.Unhold := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Unholding_SC" Id="{858b8333-c43d-43e8-8558-c42d88806c48}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD Unholding_SC : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[fb_mem.STS.Unholding_SC := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Unsuspend" Id="{77fd945d-fe93-4ec4-ae38-4203358358a0}" FolderPath="Methods\">
      <Declaration><![CDATA[{warning 'add method implementation '}
METHOD Unsuspend : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[fb_mem.CS.Unsuspend := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Unsuspending_SC" Id="{69a1d844-8984-4b58-be47-374b60ab4cef}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD Unsuspending_SC : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[fb_mem.STS.Unsuspending_SC := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="ZeroAllVar" Id="{f66bf3cd-9d75-4dda-b5b8-eddc2795f887}">
      <Declaration><![CDATA[{warning 'add method implementation '}
METHOD ZeroAllVar : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="EM_Filling">
      <LineId Id="396" Count="31" />
      <LineId Id="722" Count="0" />
      <LineId Id="428" Count="4" />
      <LineId Id="509" Count="1" />
      <LineId Id="886" Count="0" />
      <LineId Id="885" Count="0" />
      <LineId Id="887" Count="0" />
      <LineId Id="889" Count="2" />
      <LineId Id="888" Count="0" />
      <LineId Id="893" Count="4" />
      <LineId Id="892" Count="0" />
      <LineId Id="899" Count="34" />
      <LineId Id="935" Count="11" />
      <LineId Id="948" Count="5" />
      <LineId Id="433" Count="0" />
      <LineId Id="955" Count="0" />
      <LineId Id="436" Count="13" />
      <LineId Id="700" Count="0" />
      <LineId Id="718" Count="2" />
      <LineId Id="714" Count="1" />
      <LineId Id="699" Count="0" />
      <LineId Id="716" Count="0" />
      <LineId Id="679" Count="7" />
      <LineId Id="461" Count="0" />
      <LineId Id="737" Count="0" />
      <LineId Id="739" Count="1" />
      <LineId Id="857" Count="2" />
      <LineId Id="754" Count="2" />
      <LineId Id="861" Count="3" />
      <LineId Id="771" Count="2" />
      <LineId Id="865" Count="3" />
      <LineId Id="788" Count="2" />
      <LineId Id="869" Count="3" />
      <LineId Id="805" Count="2" />
      <LineId Id="873" Count="3" />
      <LineId Id="822" Count="2" />
      <LineId Id="877" Count="3" />
      <LineId Id="839" Count="2" />
      <LineId Id="881" Count="3" />
      <LineId Id="856" Count="0" />
      <LineId Id="738" Count="0" />
      <LineId Id="736" Count="0" />
      <LineId Id="462" Count="5" />
      <LineId Id="511" Count="0" />
      <LineId Id="522" Count="0" />
      <LineId Id="636" Count="1" />
      <LineId Id="639" Count="1" />
      <LineId Id="642" Count="1" />
      <LineId Id="645" Count="2" />
      <LineId Id="644" Count="0" />
      <LineId Id="641" Count="0" />
      <LineId Id="513" Count="0" />
      <LineId Id="470" Count="0" />
      <LineId Id="664" Count="0" />
      <LineId Id="666" Count="0" />
      <LineId Id="665" Count="0" />
      <LineId Id="472" Count="0" />
      <LineId Id="536" Count="1" />
      <LineId Id="473" Count="0" />
      <LineId Id="526" Count="9" />
      <LineId Id="474" Count="0" />
      <LineId Id="476" Count="0" />
      <LineId Id="538" Count="0" />
      <LineId Id="541" Count="2" />
      <LineId Id="539" Count="0" />
      <LineId Id="544" Count="2" />
      <LineId Id="540" Count="0" />
      <LineId Id="477" Count="3" />
      <LineId Id="549" Count="7" />
      <LineId Id="481" Count="0" />
      <LineId Id="557" Count="0" />
      <LineId Id="577" Count="9" />
      <LineId Id="482" Count="0" />
      <LineId Id="484" Count="2" />
      <LineId Id="569" Count="7" />
      <LineId Id="567" Count="0" />
      <LineId Id="487" Count="0" />
      <LineId Id="589" Count="9" />
      <LineId Id="488" Count="0" />
      <LineId Id="587" Count="0" />
      <LineId Id="599" Count="0" />
      <LineId Id="613" Count="0" />
      <LineId Id="615" Count="0" />
      <LineId Id="617" Count="1" />
      <LineId Id="489" Count="1" />
      <LineId Id="623" Count="4" />
      <LineId Id="621" Count="0" />
      <LineId Id="628" Count="5" />
      <LineId Id="619" Count="1" />
      <LineId Id="492" Count="16" />
      <LineId Id="340" Count="0" />
    </LineIds>
    <LineIds Name="EM_Filling.Abort">
      <LineId Id="4" Count="0" />
    </LineIds>
    <LineIds Name="EM_Filling.Aborting_SC">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="EM_Filling.Auto">
      <LineId Id="5" Count="0" />
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="EM_Filling.Clear">
      <LineId Id="4" Count="0" />
    </LineIds>
    <LineIds Name="EM_Filling.Clearing_SC">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="EM_Filling.Completing_SC">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="EM_Filling.Execute_SC">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="EM_Filling.FB_init">
      <LineId Id="20" Count="0" />
      <LineId Id="7" Count="0" />
    </LineIds>
    <LineIds Name="EM_Filling.Hold">
      <LineId Id="4" Count="0" />
    </LineIds>
    <LineIds Name="EM_Filling.Holding_SC">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="EM_Filling.Manueel">
      <LineId Id="4" Count="0" />
      <LineId Id="8" Count="0" />
    </LineIds>
    <LineIds Name="EM_Filling.Reset">
      <LineId Id="4" Count="0" />
    </LineIds>
    <LineIds Name="EM_Filling.Resetting_SC">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="EM_Filling.Start">
      <LineId Id="4" Count="0" />
    </LineIds>
    <LineIds Name="EM_Filling.Starting_SC">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="EM_Filling.State.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="EM_Filling.Stop">
      <LineId Id="4" Count="0" />
    </LineIds>
    <LineIds Name="EM_Filling.Stopping_SC">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="EM_Filling.Suspend">
      <LineId Id="4" Count="0" />
    </LineIds>
    <LineIds Name="EM_Filling.Suspending_SC">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="EM_Filling.Unhold">
      <LineId Id="4" Count="0" />
    </LineIds>
    <LineIds Name="EM_Filling.Unholding_SC">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="EM_Filling.Unsuspend">
      <LineId Id="4" Count="0" />
    </LineIds>
    <LineIds Name="EM_Filling.Unsuspending_SC">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="EM_Filling.ZeroAllVar">
      <LineId Id="4" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>