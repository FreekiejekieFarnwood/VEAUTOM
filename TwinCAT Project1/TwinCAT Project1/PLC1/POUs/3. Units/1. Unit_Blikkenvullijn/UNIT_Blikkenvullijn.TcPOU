<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="UNIT_Blikkenvullijn" Id="{2692377b-29af-456d-aace-ede4a94c185d}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK UNIT_Blikkenvullijn IMPLEMENTS  ITF_UNIT_Blikkenvullijn, ITF_PackMLV2
VAR
	fb_mem									: STRUCT_UNIT_Blikkenvullijn;
	//PackML									: PackML_StateMachine;
	
	//Custom logic
	EM_Can_Supply 							: EM_Can_Supply;	//To be programmed
	CM_TurningDevice						: CM_Motor;			//To be programmed
	CM_Outfeed_ProductionLineSensor			: CM_Sensor;		//To be Tested
	
	//PackML machine's
	EM_Filling								: EM_Machine;		//Tested
	EM_CheckWeigher							: EM_Machine;		//Tested
	EM_BottomSeal							: EM_Machine;		//Tested
	EM_Labeller								: EM_Machine;		//Tested
	EM_TurningDevice						: EM_Machine;		//Tested
	EM_StampUnit							: EM_Machine;		//Tested
	EM_SealShrink							: EM_Machine;		//Tested
	
	//Transport logic
	EM_Infeed_CheckWeigher					: EM_Transport;								//To be tested
	EM_Transport_Checkweigher_BottomSeal	: EM_Transport_Mechanische_Stop;			//To be tested
	EM_Transport_BottomSeal_Labeller		: EM_Transport_Mechanische_Stop;			//To be tested
	EM_Transport_TurningDevice_StampUnit	: EM_Transport;								//To be tested
	EM_Transport_StampUnit_SealShrink		: EM_Transport_Mechanische_Stop;			//To be tested
	
	//Management Logic
	AlarmHandler 							: AlarmHandler;
	ModeSelect								: ModeSelect;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[(*
$$$$$$$$\                                                                   $$\       $$$$$$$$\                     $$\                                         $$\                     
$$  _____|                                                                  $$ |      $$  _____|                    \__|                                        \__|                    
$$ |   $$$$$$\   $$$$$$\  $$$$$$$\  $$\  $$\  $$\  $$$$$$\   $$$$$$\   $$$$$$$ |      $$ |      $$$$$$$\   $$$$$$\  $$\ $$$$$$$\   $$$$$$\   $$$$$$\   $$$$$$\  $$\ $$$$$$$\   $$$$$$\  
$$$$$\ \____$$\ $$  __$$\ $$  __$$\ $$ | $$ | $$ |$$  __$$\ $$  __$$\ $$  __$$ |      $$$$$\    $$  __$$\ $$  __$$\ $$ |$$  __$$\ $$  __$$\ $$  __$$\ $$  __$$\ $$ |$$  __$$\ $$  __$$\ 
$$  __|$$$$$$$ |$$ |  \__|$$ |  $$ |$$ | $$ | $$ |$$ /  $$ |$$ /  $$ |$$ /  $$ |      $$  __|   $$ |  $$ |$$ /  $$ |$$ |$$ |  $$ |$$$$$$$$ |$$$$$$$$ |$$ |  \__|$$ |$$ |  $$ |$$ /  $$ |
$$ |  $$  __$$ |$$ |      $$ |  $$ |$$ | $$ | $$ |$$ |  $$ |$$ |  $$ |$$ |  $$ |      $$ |      $$ |  $$ |$$ |  $$ |$$ |$$ |  $$ |$$   ____|$$   ____|$$ |      $$ |$$ |  $$ |$$ |  $$ |
$$ |  \$$$$$$$ |$$ |      $$ |  $$ |\$$$$$\$$$$  |\$$$$$$  |\$$$$$$  |\$$$$$$$ |      $$$$$$$$\ $$ |  $$ |\$$$$$$$ |$$ |$$ |  $$ |\$$$$$$$\ \$$$$$$$\ $$ |      $$ |$$ |  $$ |\$$$$$$$ |
\__|   \_______|\__|      \__|  \__| \_____\____/  \______/  \______/  \_______|      \________|\__|  \__| \____$$ |\__|\__|  \__| \_______| \_______|\__|      \__|\__|  \__| \____$$ |
                                                                                                          $$\   $$ |                                                          $$\   $$ |
                                                                                                          \$$$$$$  |                                                          \$$$$$$  |
                                                                                                           \______/                                                            \______/ 
*)
//********************************Init PackML***********************************
fb_mem.STS.State := PackML_StateMachine(State			:= fb_mem.STS.State,
										Start           := fb_mem.CS.Start,
										Stop            := fb_mem.CS.Stop,
										Reset           := fb_mem.CS.Reset,
										Abort           := fb_mem.CS.Abort,
										Clear           := fb_mem.CS.Clear,
										UnSuspend       := fb_mem.CS.UnSuspend,
										Suspend         := fb_mem.CS.Suspend,
										UnHold          := fb_mem.CS.UnHold,
										Hold            := fb_mem.CS.Hold,
										Starting_SC     := fb_mem.STS.Starting_SC,
										Execute_SC      := fb_mem.STS.Execute_SC,
										Resetting_SC    := fb_mem.STS.Resetting_SC,
										Holding_SC      := fb_mem.STS.Holding_SC,
										Unholding_SC    := fb_mem.STS.Unholding_SC,
										Suspending_SC   := fb_mem.STS.Suspending_SC,
										Unsuspending_SC := fb_mem.STS.Unsuspending_SC,
										Aborting_SC     := fb_mem.STS.Aborting_SC,
										Clearing_SC     := fb_mem.STS.Clearing_SC,
										Stopping_SC     := fb_mem.STS.Stopping_SC);

//********************************ZEROING***********************************								
fb_mem.STS.Auto 			:= FALSE;
fb_mem.STS.Manueel 			:= FALSE;
fb_mem.STS.Starting_SC 		:= FALSE;
fb_mem.STS.Execute_SC 		:= FALSE;
fb_mem.STS.Resetting_SC 	:= FALSE;
fb_mem.STS.Holding_SC 		:= FALSE;
fb_mem.STS.Unholding_SC 	:= FALSE;
fb_mem.STS.Suspending_SC 	:= FALSE;
fb_mem.STS.Unsuspending_SC 	:= FALSE;
fb_mem.STS.Aborting_SC 		:= FALSE;
fb_mem.STS.Clearing_SC 		:= FALSE;
fb_mem.STS.Stopping_SC 		:= FALSE;
fb_mem.STS.Completing_SC 	:= FALSE;

//********************************init Modules***********************************
// Custom logic
EM_Can_Supply();
CM_Outfeed_ProductionLineSensor();

// Greyboxes
EM_Filling();
EM_CheckWeigher();
EM_BottomSeal();
EM_Labeller();
EM_TurningDevice();
EM_StampUnit();
EM_SealShrink();

// Transports
EM_Infeed_CheckWeigher();
EM_Transport_Checkweigher_BottomSeal();
EM_Transport_BottomSeal_Labeller();
EM_Transport_TurningDevice_StampUnit();
EM_Transport_StampUnit_SealShrink();

// Management logic
AlarmHandler();
ModeSelect();

//********************************Auto manual logic***********************************
IF fb_mem.CS.Auto THEN
	fb_mem.STS.Auto := TRUE;
ELSE
	fb_mem.STS.Auto := FALSE;
END_IF

IF fb_mem.CS.Manueel THEN
	fb_mem.STS.Manueel := TRUE;
ELSE
	fb_mem.STS.Manueel := FALSE;
END_IF

//********************************Control signals***********************************
//********************************Auto manual logic***********************************
IF fb_mem.CS.Auto THEN
	fb_mem.STS.Auto := TRUE;
ELSE
	fb_mem.STS.Auto := FALSE;
END_IF

IF fb_mem.CS.Manueel THEN
	fb_mem.STS.Manueel := TRUE;
ELSE
	fb_mem.STS.Manueel := FALSE;
END_IF

IF fb_mem.CS.Reset THEN
	EM_Can_Supply.Reset();
//	CM_Outfeed_ProductionLineSensor.Reset();
	EM_Filling.Reset();
	EM_CheckWeigher.Reset();
	EM_BottomSeal.Reset();
	EM_Labeller.Reset();
	EM_TurningDevice.Reset();
	EM_StampUnit.Reset();
	EM_SealShrink.Reset();
	EM_Infeed_CheckWeigher.Reset();
	EM_Transport_Checkweigher_BottomSeal.Reset();
	EM_Transport_BottomSeal_Labeller.Reset();
	EM_Transport_TurningDevice_StampUnit.Reset();
	EM_Transport_StampUnit_SealShrink.Reset();
END_IF

IF fb_mem.CS.Abort THEN
	EM_Can_Supply.Abort();
//	CM_Outfeed_ProductionLineSensor.Abort();
	EM_Filling.Abort();
	EM_CheckWeigher.Abort();
	EM_BottomSeal.Abort();
	EM_Labeller.Abort();
	EM_TurningDevice.Abort();
	EM_StampUnit.Abort();
	EM_SealShrink.Abort();
	EM_Infeed_CheckWeigher.Abort();
	EM_Transport_Checkweigher_BottomSeal.Abort();
	EM_Transport_BottomSeal_Labeller.Abort();
	EM_Transport_TurningDevice_StampUnit.Abort();
	EM_Transport_StampUnit_SealShrink.Abort();
END_IF

IF fb_mem.CS.Clear THEN
	EM_Can_Supply.Clear();
//	CM_Outfeed_ProductionLineSensor.Clear();
	EM_Filling.Clear();
	EM_CheckWeigher.Clear();
	EM_BottomSeal.Clear();
	EM_Labeller.Clear();
	EM_TurningDevice.Clear();
	EM_StampUnit.Clear();
	EM_SealShrink.Clear();
	EM_Infeed_CheckWeigher.Clear();
	EM_Transport_Checkweigher_BottomSeal.Clear();
	EM_Transport_BottomSeal_Labeller.Clear();
	EM_Transport_TurningDevice_StampUnit.Clear();
	EM_Transport_StampUnit_SealShrink.Clear();
END_IF

IF fb_mem.CS.UnSuspend THEN
	EM_Can_Supply.UnSuspend();
//	CM_Outfeed_ProductionLineSensor.UnSuspend();
	EM_Filling.UnSuspend();
	EM_CheckWeigher.UnSuspend();
	EM_BottomSeal.UnSuspend();
	EM_Labeller.UnSuspend();
	EM_TurningDevice.UnSuspend();
	EM_StampUnit.UnSuspend();
	EM_SealShrink.UnSuspend();
	EM_Infeed_CheckWeigher.UnSuspend();
	EM_Transport_Checkweigher_BottomSeal.UnSuspend();
	EM_Transport_BottomSeal_Labeller.UnSuspend();
	EM_Transport_TurningDevice_StampUnit.UnSuspend();
	EM_Transport_StampUnit_SealShrink.UnSuspend();
END_IF

IF fb_mem.CS.Suspend THEN
	EM_Can_Supply.Suspend();
//	CM_Outfeed_ProductionLineSensor.Suspend();
	EM_Filling.Suspend();
	EM_CheckWeigher.Suspend();
	EM_BottomSeal.Suspend();
	EM_Labeller.Suspend();
	EM_TurningDevice.Suspend();
	EM_StampUnit.Suspend();
	EM_SealShrink.Suspend();
	EM_Infeed_CheckWeigher.Suspend();
	EM_Transport_Checkweigher_BottomSeal.Suspend();
	EM_Transport_BottomSeal_Labeller.Suspend();
	EM_Transport_TurningDevice_StampUnit.Suspend();
	EM_Transport_StampUnit_SealShrink.Suspend();
END_IF

IF fb_mem.CS.UnHold THEN
	EM_Can_Supply.UnHold();
//	CM_Outfeed_ProductionLineSensor.UnHold();
	EM_Filling.UnHold();
	EM_CheckWeigher.UnHold();
	EM_BottomSeal.UnHold();
	EM_Labeller.UnHold();
	EM_TurningDevice.UnHold();
	EM_StampUnit.UnHold();
	EM_SealShrink.UnHold();
	EM_Infeed_CheckWeigher.UnHold();
	EM_Transport_Checkweigher_BottomSeal.UnHold();
	EM_Transport_BottomSeal_Labeller.UnHold();
	EM_Transport_TurningDevice_StampUnit.UnHold();
	EM_Transport_StampUnit_SealShrink.UnHold();
END_IF

IF fb_mem.CS.Hold THEN
	EM_Can_Supply.Hold();
//	CM_Outfeed_ProductionLineSensor.Hold();
	EM_Filling.Hold();
	EM_CheckWeigher.Hold();
	EM_BottomSeal.Hold();
	EM_Labeller.Hold();
	EM_TurningDevice.Hold();
	EM_StampUnit.Hold();
	EM_SealShrink.Hold();
	EM_Infeed_CheckWeigher.Hold();
	EM_Transport_Checkweigher_BottomSeal.Hold();
	EM_Transport_BottomSeal_Labeller.Hold();
	EM_Transport_TurningDevice_StampUnit.Hold();
	EM_Transport_StampUnit_SealShrink.Hold();
END_IF

//*************Simulating SC statusses for the blackboxes********************
IF fb_mem.SIM.Starting_SC THEN
	EM_Can_Supply.Starting_SC();
	EM_Filling.Starting_SC();
	EM_CheckWeigher.Starting_SC();
	EM_BottomSeal.Starting_SC();
	EM_Labeller.Starting_SC();
	EM_StampUnit.Starting_SC();
	EM_SealShrink.Starting_SC();
	fb_mem.STS.Starting_SC := TRUE;
END_IF;
IF fb_mem.SIM.Execute_SC THEN
	fb_mem.STS.Execute_SC := TRUE;
	EM_Can_Supply.Execute_SC();
	EM_Filling.Execute_SC();
	EM_CheckWeigher.Execute_SC();
	EM_BottomSeal.Execute_SC();
	EM_Labeller.Execute_SC();
	EM_StampUnit.Execute_SC();
	EM_SealShrink.Execute_SC();
END_IF;
IF fb_mem.SIM.Resetting_SC THEN
	EM_Can_Supply.Resetting_SC();
	EM_Filling.Resetting_SC();
	EM_CheckWeigher.Resetting_SC();
	EM_BottomSeal.Resetting_SC();
	EM_Labeller.Resetting_SC();
	EM_StampUnit.Resetting_SC();
	EM_SealShrink.Resetting_SC();
	fb_mem.STS.Resetting_SC := TRUE;
END_IF;
IF fb_mem.SIM.Holding_SC THEN
	fb_mem.STS.Holding_SC := TRUE;
	EM_Can_Supply.Holding_SC();
	EM_Filling.Holding_SC();
	EM_CheckWeigher.Holding_SC();
	EM_BottomSeal.Holding_SC();
	EM_Labeller.Holding_SC();
	EM_StampUnit.Holding_SC();
	EM_SealShrink.Holding_SC();
END_IF;
IF fb_mem.SIM.Unholding_SC THEN
	EM_Can_Supply.Unholding_SC();
	EM_Filling.Unholding_SC();
	EM_CheckWeigher.Unholding_SC();
	EM_BottomSeal.Unholding_SC();
	EM_Labeller.Unholding_SC();
	EM_StampUnit.Unholding_SC();
	EM_SealShrink.Unholding_SC();
	fb_mem.STS.Unholding_SC := TRUE;
END_IF;
IF fb_mem.SIM.Suspending_SC THEN
	fb_mem.STS.Suspending_SC := TRUE;
	EM_Can_Supply.Suspending_SC();
	EM_Filling.Suspending_SC();
	EM_CheckWeigher.Suspending_SC();
	EM_BottomSeal.Suspending_SC();
	EM_Labeller.Suspending_SC();
	EM_StampUnit.Suspending_SC();
	EM_SealShrink.Suspending_SC();
END_IF;
IF fb_mem.SIM.Unsuspending_SC THEN
	EM_Can_Supply.Unsuspending_SC();
	EM_Filling.Unsuspending_SC();
	EM_CheckWeigher.Unsuspending_SC();
	EM_BottomSeal.Unsuspending_SC();
	EM_Labeller.Unsuspending_SC();
	EM_StampUnit.Unsuspending_SC();
	EM_SealShrink.Unsuspending_SC();
	fb_mem.STS.Unsuspending_SC := TRUE;
END_IF;
IF fb_mem.SIM.Aborting_SC THEN
	fb_mem.STS.Aborting_SC := TRUE;
	EM_Can_Supply.Aborting_SC();
	EM_Filling.Aborting_SC();
	EM_CheckWeigher.Aborting_SC();
	EM_BottomSeal.Aborting_SC();
	EM_Labeller.Aborting_SC();
	EM_StampUnit.Aborting_SC();
	EM_SealShrink.Aborting_SC();
END_IF;
IF fb_mem.SIM.Clearing_SC THEN
	fb_mem.STS.Clearing_SC := TRUE;
	EM_Can_Supply.Clearing_SC();
	EM_Filling.Clearing_SC();
	EM_CheckWeigher.Clearing_SC();
	EM_BottomSeal.Clearing_SC();
	EM_Labeller.Clearing_SC();
	EM_StampUnit.Clearing_SC();
	EM_SealShrink.Clearing_SC();
END_IF;
IF fb_mem.SIM.Stopping_SC THEN
	fb_mem.STS.Stopping_SC := TRUE;
	EM_Can_Supply.Stopping_SC();
	EM_Filling.Stopping_SC();
	EM_CheckWeigher.Stopping_SC();
	EM_BottomSeal.Stopping_SC();
	EM_Labeller.Stopping_SC();
	EM_StampUnit.Stopping_SC();
	EM_SealShrink.Stopping_SC();
END_IF

//********************************Exeptionhandling***********************************
// Puts line in HOLDING if a module is SUSPENDING
IF 	EM_Can_Supply.State 							= E_State_PackML.HOLDING OR
		EM_Filling.State 							= E_State_PackML.HOLDING OR
		EM_Infeed_CheckWeigher.State				= E_State_PackML.HOLDING OR
		EM_CheckWeigher.State 						= E_State_PackML.HOLDING OR
		EM_Transport_Checkweigher_BottomSeal.State	= E_State_PackML.HOLDING OR
		EM_BottomSeal.State							= E_State_PackML.HOLDING OR
		EM_Transport_BottomSeal_Labeller.State		= E_State_PackML.HOLDING OR
		EM_Labeller.State 							= E_State_PackML.HOLDING OR
		EM_TurningDevice.State						= E_State_PackML.HOLDING OR
		EM_Transport_TurningDevice_StampUnit.State	= E_State_PackML.HOLDING OR
		EM_StampUnit.State							= E_State_PackML.HOLDING OR
		EM_Transport_StampUnit_SealShrink.State		= E_State_PackML.HOLDING OR
		EM_SealShrink.State 						= E_State_PackML.HOLDING THEN
	fb_mem.CS.Suspend := TRUE;
	EM_Can_Supply.Suspend();
	EM_Filling.Suspend();
	EM_Infeed_CheckWeigher.Stop();
	EM_CheckWeigher.Suspend();
	EM_Transport_Checkweigher_BottomSeal.Stop();
	EM_BottomSeal.Suspend();
	EM_Transport_BottomSeal_Labeller.Stop();
	EM_Labeller.Suspend();
	EM_TurningDevice.Suspend();
	EM_Transport_TurningDevice_StampUnit.Stop();
	EM_StampUnit.Suspend();
	EM_Transport_StampUnit_SealShrink.Stop();
	EM_SealShrink.Suspend();
END_IF

//********************************Action case***********************************
CASE fb_mem.STS.State OF
	E_State_PackML.IDLE 			: 
		IF fb_mem.CS.Start AND fb_mem.STS.Auto OR fb_mem.HMI.Start AND fb_mem.STS.Manueel THEN
			fb_mem.CS.Start := TRUE;
			
		END_IF
	E_State_PackML.STARTING 		:
		EM_Can_Supply.Start();
		IF EM_Can_Supply.State = E_State_PackML.EXECUTE THEN
			EM_Filling.Start();
			EM_Filling.Starting_SC();
			IF EM_Filling.State = E_State_PackML.EXECUTE THEN
				EM_CheckWeigher.Start();
				IF EM_CheckWeigher.State = E_State_PackML.EXECUTE THEN
					EM_Transport_CheckWeigher_BottomSeal.Start();
					IF EM_Transport_CheckWeigher_BottomSeal.State = E_State_PackML.EXECUTE THEN
						EM_BottomSeal.Start();
						IF EM_BottomSeal.State = E_State_PackML.EXECUTE THEN
							EM_Transport_BottomSeal_Labeller.Start();
							IF EM_Transport_BottomSeal_Labeller.State = E_State_PackML.EXECUTE THEN
								EM_Labeller.Start();
								IF EM_Labeller.State = E_State_PackML.EXECUTE THEN
									EM_TurningDevice.Start();
									IF EM_TurningDevice.State = E_State_PackML.EXECUTE THEN
										EM_Transport_TurningDevice_StampUnit.Start();
										IF EM_Transport_TurningDevice_StampUnit.State = E_State_PackML.EXECUTE THEN
											EM_Stampunit.Start();
											IF EM_Stampunit.State = E_State_PackML.EXECUTE THEN
												EM_Transport_StampUnit_SealShrink.Start();
												IF EM_Transport_StampUnit_SealShrink.State = E_State_PackML.EXECUTE THEN
													fb_mem.STS.Starting_SC := TRUE;
												END_IF
											END_IF
										END_IF
									END_IF
								END_IF
							END_IF
						END_IF
					END_IF
				END_IF
			END_IF
		END_IF
	
	E_State_PackML.EXECUTE 			: 
		IF fb_mem.CS.Stop AND fb_mem.STS.Auto OR fb_mem.HMI.Stop AND fb_mem.STS.Manueel THEN
			fb_mem.STS.Execute_SC := TRUE;
			EM_Can_Supply.Stop();
			EM_Filling.Stop();
			EM_Infeed_CheckWeigher.Stop();
			EM_CheckWeigher.Stop();
			EM_Transport_Checkweigher_BottomSeal.Stop();
			EM_BottomSeal.Stop();
			EM_Transport_BottomSeal_Labeller.Stop();
			EM_Labeller.Stop();
			EM_TurningDevice.Stop();	
			EM_Transport_TurningDevice_StampUnit.Stop();
			EM_StampUnit.Stop();
			EM_Transport_StampUnit_SealShrink.Stop();
			EM_SealShrink.Stop();
		END_IF
	
	E_State_PackML.COMPLETE 		:
		IF fb_mem.CS.Clear AND fb_mem.STS.Auto OR fb_mem.HMI.Clear AND fb_mem.STS.Manueel THEN
			fb_mem.STS.Completing_SC := TRUE;
		END_IF
	E_State_PackML.RESETTING 		:
		IF 	EM_Can_Supply.State 						= E_State_PackML.IDLE AND
			EM_Filling.State 							= E_State_PackML.IDLE AND
			EM_Infeed_CheckWeigher.State				= E_State_PackML.IDLE AND
			EM_CheckWeigher.State 						= E_State_PackML.IDLE AND
			EM_Transport_Checkweigher_BottomSeal.State	= E_State_PackML.IDLE AND
			EM_BottomSeal.State							= E_State_PackML.IDLE AND
			EM_Transport_BottomSeal_Labeller.State		= E_State_PackML.IDLE AND
			EM_Labeller.State 							= E_State_PackML.IDLE AND
			EM_TurningDevice.State						= E_State_PackML.IDLE AND
			EM_Transport_TurningDevice_StampUnit.State	= E_State_PackML.IDLE AND
			EM_StampUnit.State							= E_State_PackML.IDLE AND
			EM_Transport_StampUnit_SealShrink.State		= E_State_PackML.IDLE AND
			EM_SealShrink.State 						= E_State_PackML.IDLE THEN
		//State complete:
		fb_mem.STS.Resetting_SC := TRUE;
		END_IF
	E_State_PackML.HOLDING 			:	// TO BE PROGRAMMED
		//Not defined
		
	E_State_PackML.HELD 			:	// TO BE PROGRAMMED
		//Not defined
	
	E_State_PackML.UNHOLDING 		:	// TO BE PROGRAMMED
		//Not defined
	
	E_State_PackML.SUSPENDING 		:
		IF (EM_Can_Supply.State 						= E_State_PackML.SUSPENDED OR
			EM_Can_Supply.State 						= E_State_PackML.HELD) AND
		   (EM_Filling.State 							= E_State_PackML.SUSPENDED OR
			EM_Filling.State 							= E_State_PackML.HELD) AND
		   (EM_Infeed_CheckWeigher.State				= E_State_PackML.SUSPENDED OR
			EM_Infeed_CheckWeigher.State				= E_State_PackML.HELD) AND
		   (EM_CheckWeigher.State 						= E_State_PackML.SUSPENDED OR
			EM_CheckWeigher.State 						= E_State_PackML.HELD) AND
		   (EM_Transport_Checkweigher_BottomSeal.State	= E_State_PackML.SUSPENDED OR
			EM_Transport_Checkweigher_BottomSeal.State	= E_State_PackML.HELD) AND
		   (EM_BottomSeal.State							= E_State_PackML.SUSPENDED OR
			EM_BottomSeal.State 						= E_State_PackML.HELD) AND
		   (EM_Transport_BottomSeal_Labeller.State		= E_State_PackML.SUSPENDED OR
			EM_Transport_BottomSeal_Labeller.State 		= E_State_PackML.HELD) AND
		   (EM_Labeller.State 							= E_State_PackML.SUSPENDED OR
			EM_Labeller.State 							= E_State_PackML.HELD) AND
		   (EM_TurningDevice.State						= E_State_PackML.SUSPENDED OR
			EM_TurningDevice.State 						= E_State_PackML.HELD) AND
		   (EM_Transport_TurningDevice_StampUnit.State	= E_State_PackML.SUSPENDED OR
			EM_Transport_TurningDevice_StampUnit.State	= E_State_PackML.HELD) AND
		   (EM_StampUnit.State							= E_State_PackML.SUSPENDED OR
			EM_StampUnit.State							= E_State_PackML.HELD) AND
		   (EM_Transport_StampUnit_SealShrink.State		= E_State_PackML.SUSPENDED OR
			EM_Transport_StampUnit_SealShrink.State		= E_State_PackML.HELD) AND
		   (EM_SealShrink.State 						= E_State_PackML.SUSPENDED OR 
			EM_SealShrink.State							= E_State_PackML.HELD) THEN
		fb_mem.STS.Suspending_SC := TRUE;
		END_IF
	E_State_PackML.SUSPENDED 		:
		IF	EM_Can_Supply.State 						= E_State_PackML.UNHOLDING OR
			EM_Filling.State 							= E_State_PackML.UNHOLDING OR
			EM_Infeed_CheckWeigher.State				= E_State_PackML.UNHOLDING OR
			EM_CheckWeigher.State 						= E_State_PackML.UNHOLDING OR
			EM_Transport_Checkweigher_BottomSeal.State	= E_State_PackML.UNHOLDING OR
			EM_BottomSeal.State							= E_State_PackML.UNHOLDING OR
			EM_Transport_BottomSeal_Labeller.State		= E_State_PackML.UNHOLDING OR
			EM_Labeller.State 							= E_State_PackML.UNHOLDING OR
			EM_TurningDevice.State						= E_State_PackML.UNHOLDING OR
			EM_Transport_TurningDevice_StampUnit.State	= E_State_PackML.UNHOLDING OR
			EM_StampUnit.State							= E_State_PackML.UNHOLDING OR
			EM_Transport_StampUnit_SealShrink.State		= E_State_PackML.UNHOLDING OR
			EM_SealShrink.State 						= E_State_PackML.UNHOLDING THEN 
		fb_mem.CS.Unsuspend := TRUE;
		EM_Can_Supply.Unsuspend();
		EM_Filling.Unsuspend();
		EM_Infeed_CheckWeigher.Start();
		EM_CheckWeigher.Unsuspend();
		EM_Transport_Checkweigher_BottomSeal.Start();
		EM_BottomSeal.Unsuspend();
		EM_Transport_BottomSeal_Labeller.Start();
		EM_Labeller.Unsuspend();
		EM_TurningDevice.Unsuspend();
		EM_Transport_TurningDevice_StampUnit.Start();
		EM_StampUnit.Unsuspend();
		EM_Transport_StampUnit_SealShrink.Start();
		EM_SealShrink.Unsuspend();
		END_IF
	E_State_PackML.UNSUSPENDING 	:
		fb_mem.STS.Unsuspending_SC	:= TRUE;
	E_State_PackML.ABORTING			:
		IF 	EM_Can_Supply.State 							= E_State_PackML.ABORTED AND
				EM_Filling.State 							= E_State_PackML.ABORTED AND
				EM_Infeed_CheckWeigher.State				= E_State_PackML.ABORTED AND
				EM_CheckWeigher.State 						= E_State_PackML.ABORTED AND
				EM_Transport_Checkweigher_BottomSeal.State	= E_State_PackML.ABORTED AND
				EM_BottomSeal.State							= E_State_PackML.ABORTED AND
				EM_Transport_BottomSeal_Labeller.State		= E_State_PackML.ABORTED AND
				EM_Labeller.State 							= E_State_PackML.ABORTED AND
				EM_TurningDevice.State						= E_State_PackML.ABORTED AND
				EM_Transport_TurningDevice_StampUnit.State	= E_State_PackML.ABORTED AND
				EM_StampUnit.State							= E_State_PackML.ABORTED AND
				EM_Transport_StampUnit_SealShrink.State		= E_State_PackML.ABORTED AND
				EM_SealShrink.State 						= E_State_PackML.ABORTED THEN
			fb_mem.STS.Aborting_SC := TRUE;
		END_IF
	E_State_PackML.ABORTED			:
		IF fb_mem.CS.Clear AND fb_mem.STS.Auto OR fb_mem.HMI.Clear AND fb_mem.STS.Manueel THEN
			fb_mem.CS.Clear 							:= TRUE;
			EM_Can_Supply.Clear();
			EM_Filling.Clear();
			EM_Infeed_CheckWeigher.Clear();
			EM_CheckWeigher.Clear();
			EM_Transport_Checkweigher_BottomSeal.Clear();
			EM_BottomSeal.Clear();
			EM_Transport_BottomSeal_Labeller.Clear();
			EM_Labeller.Clear();
			EM_TurningDevice.Clear();
			EM_Transport_TurningDevice_StampUnit.Clear();
			EM_StampUnit.Clear();
			EM_Transport_StampUnit_SealShrink.Clear();
			EM_SealShrink.Clear();
		END_IF
	E_State_PackML.CLEARING 		:
		IF 	EM_Can_Supply.State 							= E_State_PackML.STOPPED AND
				EM_Filling.State 							= E_State_PackML.STOPPED AND
				EM_Infeed_CheckWeigher.State				= E_State_PackML.STOPPED AND
				EM_CheckWeigher.State 						= E_State_PackML.STOPPED AND
				EM_Transport_Checkweigher_BottomSeal.State	= E_State_PackML.STOPPED AND
				EM_BottomSeal.State							= E_State_PackML.STOPPED AND
				EM_Transport_BottomSeal_Labeller.State		= E_State_PackML.STOPPED AND
				EM_Labeller.State 							= E_State_PackML.STOPPED AND
				EM_TurningDevice.State						= E_State_PackML.STOPPED AND
				EM_Transport_TurningDevice_StampUnit.State	= E_State_PackML.STOPPED AND
				EM_StampUnit.State							= E_State_PackML.STOPPED AND
				EM_Transport_StampUnit_SealShrink.State		= E_State_PackML.STOPPED AND
				EM_SealShrink.State 						= E_State_PackML.STOPPED THEN
			fb_mem.STS.Clearing_SC := TRUE;
		END_IF
	E_State_PackML.STOPPING 		:
		EM_Can_Supply.Stop();
		EM_Filling.Stop();
		EM_Infeed_CheckWeigher.Stop();
		EM_CheckWeigher.Stop();
		EM_Transport_Checkweigher_BottomSeal.Stop();
		EM_BottomSeal.Stop();
		EM_Transport_BottomSeal_Labeller.Stop();
		EM_Labeller.Stop();
		EM_TurningDevice.Stop();
		EM_Transport_TurningDevice_StampUnit.Stop();
		EM_StampUnit.Stop();
		EM_Transport_StampUnit_SealShrink.Stop();
		EM_SealShrink.Stop();
	E_State_PackML.STOPPED 			:
		IF fb_mem.CS.Reset AND fb_mem.STS.Auto OR fb_mem.HMI.Reset AND fb_mem.STS.Manueel THEN
			fb_mem.CS.Reset := TRUE;
			EM_Can_Supply.Reset();
			EM_Filling.Reset();
			EM_Infeed_CheckWeigher.Reset();
			EM_CheckWeigher.Reset();
			EM_Transport_Checkweigher_BottomSeal.Reset();
			EM_BottomSeal.Reset();
			EM_Transport_BottomSeal_Labeller.Reset();
			EM_Labeller.Reset();
			EM_TurningDevice.Reset();
			EM_Transport_TurningDevice_StampUnit.Reset();
			EM_StampUnit.Reset();
			EM_Transport_StampUnit_SealShrink.Reset();
			EM_SealShrink.Reset();
		END_IF 
	ELSE
		fb_mem.STS.State := E_State_PackML.SUSPENDING;
END_CASE

//********************************HMI_Connection***********************************
fb_mem.STS.StringState     := TO_STRING(fb_mem.STS.State);

//********************************ZEROING***********************************

fb_mem.CS.Auto            := FALSE;
fb_mem.CS.Manueel         := FALSE;
fb_mem.CS.Start           := FALSE;
fb_mem.CS.Stop            := FALSE;
fb_mem.CS.Reset           := FALSE;
fb_mem.CS.Abort           := FALSE;
fb_mem.CS.Clear           := FALSE;
fb_mem.CS.UnSuspend       := FALSE;
fb_mem.CS.Suspend         := FALSE;
fb_mem.CS.UnHold          := FALSE;
fb_mem.CS.Hold            := FALSE;


fb_mem.HMI.Auto            := FALSE;
fb_mem.HMI.Manueel         := FALSE;
fb_mem.HMI.Start           := FALSE;
fb_mem.HMI.Stop            := FALSE;
fb_mem.HMI.Reset           := FALSE;
fb_mem.HMI.Abort           := FALSE;
fb_mem.HMI.Clear           := FALSE;
fb_mem.HMI.UnSuspend       := FALSE;
fb_mem.HMI.Suspend         := FALSE;
fb_mem.HMI.UnHold          := FALSE;
fb_mem.HMI.Hold            := FALSE;]]></ST>
    </Implementation>
    <Folder Name="Methods" Id="{888df613-56ec-4a33-a3be-ed5e7a38347c}" />
    <Folder Name="Properties" Id="{9d12a71d-c349-47b5-a9eb-72ac504fd1ab}" />
    <Method Name="Abort" Id="{e596807a-7158-4696-9adf-d22509233774}" FolderPath="Methods\">
      <Declaration><![CDATA[{warning 'add method implementation '}
METHOD Abort : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[fb_mem.CS.Abort := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Auto" Id="{4b704fb1-6638-4a28-b365-6fa16da30131}" FolderPath="Methods\">
      <Declaration><![CDATA[{warning 'add method implementation '}
METHOD Auto : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[fb_mem.CS.Auto := TRUE;
fb_mem.CS.Manueel := FALSE;

Auto := fb_mem.STS.Auto;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Clear" Id="{a322f41b-8194-4188-8de9-5533daff8fc3}" FolderPath="Methods\">
      <Declaration><![CDATA[{warning 'add method implementation '}
METHOD Clear : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[fb_mem.CS.Clear := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_init" Id="{e016cb9e-71c8-4e78-924d-1e46be021f7d}">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//**************************INITIATE**************************//
//Custom logic
EM_Can_Supply.FB_init(0,0);
EM_TurningDevice.FB_init(0,0);
CM_Outfeed_ProductionLineSensor.FB_init(0,0);
	
//PackML machine's
EM_Filling.FB_init(0,0);
EM_CheckWeigher.FB_init(0,0);
EM_BottomSeal.FB_init(0,0);
EM_Labeller.FB_init(0,0);
EM_TurningDevice.FB_init(0,0);
EM_StampUnit.FB_init(0,0);
EM_SealShrink.FB_init(0,0);
	
//Transport logic
EM_Infeed_CheckWeigher.FB_init(0,0);
EM_Transport_Checkweigher_BottomSeal.FB_init(0,0);
EM_Transport_BottomSeal_Labeller.FB_init(0,0);
EM_Transport_TurningDevice_StampUnit.FB_init(0,0);
EM_Transport_StampUnit_SealShrink.FB_init(0,0);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="Hold" Id="{1fb70f1c-8875-47c8-aeaf-4e82fab9cb4b}" FolderPath="Methods\">
      <Declaration><![CDATA[{warning 'add method implementation '}
METHOD Hold : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[fb_mem.CS.Hold := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Manueel" Id="{9fc2c310-63cc-43d5-989a-5178bbf814cf}" FolderPath="Methods\">
      <Declaration><![CDATA[{warning 'add method implementation '}
METHOD Manueel : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[fb_mem.CS.Manueel := TRUE;
fb_mem.CS.Auto := FALSE;

Manueel := fb_mem.STS.Manueel;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Reset" Id="{2b3e396b-01bf-4acd-9597-0d685a3af56d}" FolderPath="Methods\">
      <Declaration><![CDATA[{warning 'add method implementation '}
METHOD Reset : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[fb_mem.CS.Reset := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Start" Id="{400d8d6d-147e-4539-a4d5-8defa6b8636d}" FolderPath="Methods\">
      <Declaration><![CDATA[{warning 'add method implementation '}
METHOD Start : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[fb_mem.CS.Start := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Property Name="State" Id="{cef9363c-b05b-4383-af81-7f10dba012d3}" FolderPath="Properties\">
      <Declaration><![CDATA[{warning 'add property implementation'}
PROPERTY State : E_State_PackML
]]></Declaration>
      <Get Name="Get" Id="{96915ddf-ff5c-4ef2-87ec-9d35d4597238}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[State := fb_mem.STS.State;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="Stop" Id="{4c0924c9-a52f-4b6e-bf0d-704986e03102}" FolderPath="Methods\">
      <Declaration><![CDATA[{warning 'add method implementation '}
METHOD Stop : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[fb_mem.CS.Stop := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Suspend" Id="{69f46faa-6a1e-4288-bc62-963d0585fc7a}" FolderPath="Methods\">
      <Declaration><![CDATA[{warning 'add method implementation '}
METHOD Suspend : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[fb_mem.CS.Suspend := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Unhold" Id="{0a1409a1-c8b8-4a74-b0cd-fe8ad6b35955}" FolderPath="Methods\">
      <Declaration><![CDATA[{warning 'add method implementation '}
METHOD Unhold : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[fb_mem.CS.Unhold := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Unsuspend" Id="{418763d9-518e-4e45-8648-ed28bd3b116c}" FolderPath="Methods\">
      <Declaration><![CDATA[{warning 'add method implementation '}
METHOD Unsuspend : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[fb_mem.CS.Unsuspend := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="ZeroAllVar" Id="{82413d3f-afdc-4eeb-89a6-73f7cf5fb05c}">
      <Declaration><![CDATA[{warning 'add method implementation '}
METHOD ZeroAllVar : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="UNIT_Blikkenvullijn">
      <LineId Id="33" Count="11" />
      <LineId Id="1109" Count="0" />
      <LineId Id="1460" Count="19" />
      <LineId Id="965" Count="0" />
      <LineId Id="1128" Count="0" />
      <LineId Id="1480" Count="12" />
      <LineId Id="943" Count="0" />
      <LineId Id="314" Count="0" />
      <LineId Id="913" Count="0" />
      <LineId Id="1494" Count="0" />
      <LineId Id="824" Count="0" />
      <LineId Id="915" Count="0" />
      <LineId Id="1495" Count="0" />
      <LineId Id="917" Count="0" />
      <LineId Id="916" Count="0" />
      <LineId Id="919" Count="0" />
      <LineId Id="921" Count="0" />
      <LineId Id="920" Count="0" />
      <LineId Id="923" Count="2" />
      <LineId Id="1497" Count="0" />
      <LineId Id="1496" Count="0" />
      <LineId Id="922" Count="0" />
      <LineId Id="927" Count="1" />
      <LineId Id="930" Count="0" />
      <LineId Id="929" Count="0" />
      <LineId Id="1493" Count="0" />
      <LineId Id="932" Count="0" />
      <LineId Id="931" Count="0" />
      <LineId Id="933" Count="0" />
      <LineId Id="914" Count="0" />
      <LineId Id="812" Count="10" />
      <LineId Id="810" Count="0" />
      <LineId Id="1163" Count="1" />
      <LineId Id="1498" Count="10" />
      <LineId Id="1414" Count="0" />
      <LineId Id="1291" Count="0" />
      <LineId Id="1277" Count="13" />
      <LineId Id="1197" Count="0" />
      <LineId Id="1199" Count="0" />
      <LineId Id="1292" Count="14" />
      <LineId Id="1200" Count="0" />
      <LineId Id="1202" Count="0" />
      <LineId Id="1307" Count="14" />
      <LineId Id="1203" Count="0" />
      <LineId Id="1205" Count="0" />
      <LineId Id="1322" Count="14" />
      <LineId Id="1206" Count="0" />
      <LineId Id="1212" Count="0" />
      <LineId Id="1337" Count="14" />
      <LineId Id="1207" Count="0" />
      <LineId Id="1214" Count="0" />
      <LineId Id="1352" Count="1" />
      <LineId Id="1368" Count="0" />
      <LineId Id="1355" Count="11" />
      <LineId Id="1208" Count="0" />
      <LineId Id="1216" Count="0" />
      <LineId Id="1367" Count="0" />
      <LineId Id="1369" Count="13" />
      <LineId Id="1209" Count="0" />
      <LineId Id="1218" Count="0" />
      <LineId Id="1576" Count="20" />
      <LineId Id="1575" Count="0" />
      <LineId Id="1598" Count="18" />
      <LineId Id="1597" Count="0" />
      <LineId Id="1618" Count="29" />
      <LineId Id="1657" Count="9" />
      <LineId Id="1675" Count="0" />
      <LineId Id="1667" Count="7" />
      <LineId Id="1617" Count="0" />
      <LineId Id="1678" Count="8" />
      <LineId Id="1677" Count="0" />
      <LineId Id="417" Count="0" />
      <LineId Id="415" Count="0" />
      <LineId Id="331" Count="0" />
      <LineId Id="316" Count="11" />
      <LineId Id="315" Count="0" />
      <LineId Id="330" Count="0" />
      <LineId Id="378" Count="11" />
      <LineId Id="377" Count="0" />
      <LineId Id="390" Count="0" />
      <LineId Id="430" Count="0" />
      <LineId Id="414" Count="0" />
      <LineId Id="128" Count="0" />
      <LineId Id="111" Count="0" />
      <LineId Id="263" Count="0" />
      <LineId Id="277" Count="0" />
      <LineId Id="1717" Count="0" />
      <LineId Id="278" Count="0" />
      <LineId Id="112" Count="0" />
      <LineId Id="1548" Count="0" />
      <LineId Id="612" Count="1" />
      <LineId Id="1129" Count="0" />
      <LineId Id="615" Count="1" />
      <LineId Id="619" Count="1" />
      <LineId Id="622" Count="1" />
      <LineId Id="625" Count="1" />
      <LineId Id="628" Count="1" />
      <LineId Id="631" Count="1" />
      <LineId Id="634" Count="1" />
      <LineId Id="666" Count="1" />
      <LineId Id="669" Count="1" />
      <LineId Id="672" Count="2" />
      <LineId Id="671" Count="0" />
      <LineId Id="668" Count="0" />
      <LineId Id="636" Count="0" />
      <LineId Id="633" Count="0" />
      <LineId Id="630" Count="0" />
      <LineId Id="627" Count="0" />
      <LineId Id="624" Count="0" />
      <LineId Id="621" Count="0" />
      <LineId Id="617" Count="0" />
      <LineId Id="614" Count="0" />
      <LineId Id="678" Count="0" />
      <LineId Id="1549" Count="0" />
      <LineId Id="679" Count="0" />
      <LineId Id="681" Count="0" />
      <LineId Id="683" Count="11" />
      <LineId Id="680" Count="0" />
      <LineId Id="676" Count="0" />
      <LineId Id="1551" Count="0" />
      <LineId Id="114" Count="0" />
      <LineId Id="546" Count="0" />
      <LineId Id="548" Count="1" />
      <LineId Id="158" Count="0" />
      <LineId Id="1560" Count="12" />
      <LineId Id="256" Count="1" />
      <LineId Id="1557" Count="0" />
      <LineId Id="116" Count="0" />
      <LineId Id="698" Count="0" />
      <LineId Id="695" Count="0" />
      <LineId Id="117" Count="0" />
      <LineId Id="699" Count="0" />
      <LineId Id="696" Count="0" />
      <LineId Id="118" Count="0" />
      <LineId Id="700" Count="0" />
      <LineId Id="697" Count="0" />
      <LineId Id="119" Count="0" />
      <LineId Id="333" Count="0" />
      <LineId Id="364" Count="0" />
      <LineId Id="334" Count="0" />
      <LineId Id="365" Count="0" />
      <LineId Id="335" Count="0" />
      <LineId Id="366" Count="0" />
      <LineId Id="336" Count="0" />
      <LineId Id="367" Count="0" />
      <LineId Id="337" Count="0" />
      <LineId Id="368" Count="0" />
      <LineId Id="338" Count="0" />
      <LineId Id="369" Count="0" />
      <LineId Id="339" Count="0" />
      <LineId Id="370" Count="0" />
      <LineId Id="340" Count="0" />
      <LineId Id="371" Count="0" />
      <LineId Id="341" Count="0" />
      <LineId Id="372" Count="0" />
      <LineId Id="342" Count="0" />
      <LineId Id="373" Count="0" />
      <LineId Id="343" Count="0" />
      <LineId Id="374" Count="0" />
      <LineId Id="344" Count="0" />
      <LineId Id="375" Count="0" />
      <LineId Id="332" Count="0" />
      <LineId Id="376" Count="0" />
      <LineId Id="345" Count="1" />
      <LineId Id="120" Count="0" />
      <LineId Id="348" Count="12" />
      <LineId Id="392" Count="12" />
      <LineId Id="361" Count="0" />
      <LineId Id="347" Count="0" />
      <LineId Id="121" Count="0" />
      <LineId Id="701" Count="0" />
      <LineId Id="1702" Count="14" />
      <LineId Id="122" Count="0" />
      <LineId Id="1701" Count="0" />
      <LineId Id="511" Count="0" />
      <LineId Id="514" Count="0" />
      <LineId Id="516" Count="11" />
      <LineId Id="512" Count="1" />
      <LineId Id="496" Count="14" />
      <LineId Id="124" Count="0" />
      <LineId Id="528" Count="0" />
      <LineId Id="734" Count="11" />
      <LineId Id="732" Count="0" />
      <LineId Id="174" Count="0" />
      <LineId Id="530" Count="0" />
      <LineId Id="532" Count="12" />
      <LineId Id="531" Count="0" />
      <LineId Id="126" Count="0" />
      <LineId Id="1544" Count="1" />
      <LineId Id="550" Count="0" />
      <LineId Id="1541" Count="0" />
      <LineId Id="1077" Count="0" />
      <LineId Id="1075" Count="0" />
      <LineId Id="881" Count="0" />
      <LineId Id="827" Count="0" />
      <LineId Id="1130" Count="0" />
      <LineId Id="986" Count="9" />
      <LineId Id="968" Count="0" />
      <LineId Id="1131" Count="0" />
      <LineId Id="1033" Count="10" />
      <LineId Id="1032" Count="0" />
    </LineIds>
    <LineIds Name="UNIT_Blikkenvullijn.Abort">
      <LineId Id="4" Count="0" />
    </LineIds>
    <LineIds Name="UNIT_Blikkenvullijn.Auto">
      <LineId Id="5" Count="1" />
      <LineId Id="10" Count="0" />
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="UNIT_Blikkenvullijn.Clear">
      <LineId Id="4" Count="0" />
    </LineIds>
    <LineIds Name="UNIT_Blikkenvullijn.FB_init">
      <LineId Id="20" Count="8" />
      <LineId Id="47" Count="0" />
      <LineId Id="29" Count="5" />
      <LineId Id="46" Count="0" />
      <LineId Id="38" Count="2" />
      <LineId Id="7" Count="0" />
      <LineId Id="54" Count="0" />
    </LineIds>
    <LineIds Name="UNIT_Blikkenvullijn.Hold">
      <LineId Id="4" Count="0" />
    </LineIds>
    <LineIds Name="UNIT_Blikkenvullijn.Manueel">
      <LineId Id="4" Count="1" />
      <LineId Id="9" Count="0" />
      <LineId Id="8" Count="0" />
    </LineIds>
    <LineIds Name="UNIT_Blikkenvullijn.Reset">
      <LineId Id="4" Count="0" />
    </LineIds>
    <LineIds Name="UNIT_Blikkenvullijn.Start">
      <LineId Id="4" Count="0" />
    </LineIds>
    <LineIds Name="UNIT_Blikkenvullijn.State.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="UNIT_Blikkenvullijn.Stop">
      <LineId Id="4" Count="0" />
    </LineIds>
    <LineIds Name="UNIT_Blikkenvullijn.Suspend">
      <LineId Id="4" Count="0" />
    </LineIds>
    <LineIds Name="UNIT_Blikkenvullijn.Unhold">
      <LineId Id="4" Count="0" />
    </LineIds>
    <LineIds Name="UNIT_Blikkenvullijn.Unsuspend">
      <LineId Id="4" Count="0" />
    </LineIds>
    <LineIds Name="UNIT_Blikkenvullijn.ZeroAllVar">
      <LineId Id="4" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>